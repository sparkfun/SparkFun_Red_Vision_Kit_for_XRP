{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"camera_board/","title":"Camera Board - HM0B10 Overview","text":"<p>Let's take a closer look at the Camera Board - HM0B10 and the hardware on it.</p>"},{"location":"camera_board/#himax-hm0b10-camera-module-color","title":"Himax HM0B10 Camera Module (Color)","text":"<p>The HM0B10 camera module from Himax<sup>\u00ae</sup> has a 320 x 320 pixel resolution that supports frame rates of up to 51FPS in full resolution (320x320) and up to 60FPS in windowed/QVGA (320x240) operation. The camera module also has a 2x2 monochrome binning mode that supports up to 120FPS if you're looking to maximize frame rate over resolution and color. The HM01B0 also has a motion detect feature tied to an interrupt output so you can program it to wake up your camera project whenever it senses motion. The video data interface communicates over a configurable 1, 4 or 8bit interface that features both video frame for synchronizing multiple cameras and line sync for creating a composite image from two cameras. The HM01B0 operates over a I<sup>2</sup>C serial interface with an address of 0x24. For complete information on the HM0B10, refer to the datasheet.</p>"},{"location":"camera_board/#pinout","title":"Pinout","text":"<p>The Camera Board breaks out all of the HM0B10's pins to three 9 pin, 0.1\"-spaced plated through hole headers. The three headers are split into a single \"top\" header and a pair of \"bottom\" headers and we'll refer to them as \"Top\" and \"Bottom\" for the descriptions and tables below. Several pins are shared between the two sets. The Top header breaks out the minimum pins needed for basic use of the camera module and the Bottom header pair breaks out all the pins. This bottom pair connects directly to the 2x10 connector on the Red Vision Touch Display.</p> <p>The tables below outline the pin name, type and function of the pins broken out to each header:</p> <p>Top Header Pinout</p> Pin Label/Name Type Function GND/Ground Ground Ground SDA In/Out I<sup>2</sup>C Serial Data I/O (Open Drain) HS/HSYNC Output XC/Clock Input Main/External Clock Input D6 Output Data 6 Output D4 Output Data 4 Output D2 Output Data 2 Output D0 Output Data 0 Output PD/Cam Powerdown Input Camera Voltage Regulator Enable <p>Bottom Header Pair Pinout</p> Pin Label/Name Type Function GND/Ground Ground Ground 3V3/3.3V Voltage Input Voltage Regulator 3.3V Input SDA In/Out I<sup>2</sup>C Serial Data I/O (Open Drain) SCL Input I<sup>2</sup>C Clock Signal HS/HSYNC Output VS/VSYNC Output Frame Valid Output XC/Clock Input Main/External Clock Input PC/PCLOCK/SCK Output Pixel Clock or Serial Clock Output D6 Output Data 6 Output D7 Output Data 7 Output D4 Output Data 4 Output D5 Output Data 5 Output D2 Output Data 2 Output D3 Output Data 3 Output D0 Output Data 0 Output D1 Output Data 1 Output PD/Cam Powerdown Input Camera Voltage Regulator Enable RST/Reset Input Camera Voltage Regulator Reset"},{"location":"camera_board/#led","title":"LED","text":"<p>The sole LED on this board is a red Power LED to indicate whenever the board has power over 3.3V. </p>"},{"location":"camera_board/#solder-jumpers","title":"Solder Jumpers","text":"<p>The Camera Board has six solder jumpers labeled: OSC, GND, PAD, OSC_DIS, LED and I2C. The lists below outlines each solder jumper's function, default state and any notes on their use. Note, manipulating these solder jumpers is only recommended for advanced users as they alter the functionality of the board, change the pins used by it and require knowledge of working with jumper pads and PCB traces. </p> <p>Oscillator Jumpers:</p> <p>These solder jumpers all adjust which oscillator source connects to the camera's external clock (XCLK) pin or to use the camera's internal oscillator. The board defaults to run at 24MHz with an on board oscillator. Make sure to only connect XCLK to a single source at a time otherwise unexpected behavior or damage may occur.</p> <ul> <li>OSC: This solder jumper enables the on board 24MHz oscillator by connecting it to the HM01B0's XCLK pin. It is CLOSED by default. Sever the trace in between the solder jumpers to open the jumper and disable the 24MHz clock source. </li> <li>PAD: This solder jumper connects the HM0B10's XCLK pin to the PTH pads on the board labeled XC so users can connect an external clock source. The jumper is OPEN by default. Close the jumper to enable the XC pin. Make sure both the OSC and GND jumpers are OPEN when connecting a clock source to the XC pin. Note: When connected to the Red Vision Touch Display, this signal connects to GPIO3 on the XRP Control Board (or Pico).</li> <li>GND: This solder jumper pulls the HM0B10's XCLK pin to ground to enable the camera's internal 48MHz oscillator. It is OPEN by default. Close the jumper to enable the internal oscillator. Make sure both the OSC and PAD jumpers are OPEN before closing this jumper.</li> <li>OSC_DIS: This solder jumper controls whether the 28MHz oscillator on the board is on or off. It is OPEN by default and enables the crystal. Close the jumper to disable the 28MHz oscillator.</li> </ul> <p>Other Jumpers: * LED: The LED jumper completes the Power LED circuit and is CLOSED by default. Open the jumper to disable the Power LED. * I2C: The I<sup>2</sup>C jumper pulls the camera's SDA and SCL lines to 3.3V through a pair of resistors. This three-way jumper is CLOSED by default. Opening the jumper completely disables the pullup resistors on the SDA/SCL lines.</p>"},{"location":"camera_board/#board-dimensions","title":"Board Dimensions","text":"<p>The SparkFun Red Vision Camera Board - HMB010 measures 0.9\" x 1.40\" (22.86mm x 35.56mm) and has two mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"firmware/","title":"Red Vision Kit XRP Firmware","text":"<p>The SparkFun Red Vision Kit for XRP requires updated firmware to run properly. This firmware updates the XRP Control Board with the right drivers to work with the Vision Kit and also includes all of the MicroPython OpenCV examples included in the package. In this section we'll go over where to find this firmware to download, how to upload it to your XRP Control Board and where to open the examples once you've assembled the Vision Kit onto your XRP Kit. </p> <p>Note</p> <p>We recommend updating the firmware on the XRP Control Board prior to installing the Vision Kit boards onto it as the Touch Display makes it difficult to reach the RESET and BOOT buttons.</p>"},{"location":"firmware/#vision-kit-miropython-firmware","title":"Vision Kit MiroPython Firmware","text":"<p>First things first, we need to download the Red Vision Kit firmware UF2 file from GitHub. If you're not familiar with what a UF2 file is and want to learn more, read more about them in this Make Code post. The SparkFun Red Vision firmware UF2 file is available for download from the SparkFun MicroPython Firmware Releases on GitHub. The firmware file is named RED_VISION_MICROPYTHON_SPARKFUN_XRP_CONTROLLER so you'll need to click the \"Show all ## Files\" button at the bottom of the list and then scroll down until you find the file. Download the \"RED_VISION_MICROPYTHON_SPARKFUN_XRP_CONTROLLER\" file and take note of where it is saved on your computer.</p>"},{"location":"firmware/#entering-boot-mode-on-the-xrp","title":"Entering Boot Mode on the XRP","text":"<p>Next, put the XRP Control Board into Boot Mode using the following steps:</p> <ul> <li>Connect the XRP Control Board to your computer over USB-C.</li> <li>Locate the Reset and Boot buttons.</li> <li>Press and hold the BOOT button down.</li> <li>Press and release the RESET button (while still holding the BOOT button).</li> <li>Release the BOOT button and the XRP Control Board should open as a removable drive named \"RP2350\" on your computer.</li> </ul> <p></p>"},{"location":"firmware/#uploading-firmware","title":"Uploading Firmware","text":"<p>Backup Your Files</p> <p>Important! Make sure to back up any files/examples you have saved on your XRP as the new firmware will overwrite them.</p> <p>Now that the XRP Control Board is in BOOT mode and open as a removable drive all we need to do is place the Vison Kit Firmware uF2 file in the XRP Control Board drive location. Open the download location for the firmware file and either drag the file over to the XRP drive or copy and paste it over. The upload can take about a minute to complete.</p> <p></p> <p>After installing the firmware file, the XRP Control board should reset automatically and drop out of BOOT mode and we can move on to using the SparkFun MicroPython OpenCV examples.</p>"},{"location":"hardware_assembly/","title":"Red Vision Kit with XRP Assembly","text":"<p>Now that we're familiar with the Vision Kit's Camera Board andTouch Display and have the updated firmware installed on the XRP Control Board, it's time to connect everything up to the XRP Kit.</p>"},{"location":"hardware_assembly/#connect-camera-board-and-touch-display","title":"Connect Camera Board and Touch Display","text":"<p>Start by connecting the Camera Board to the Touch Display by plugging the 2x9 header on the Camera Board into the 2x10 header on the Touch Display. IMPORTANT: Make sure to align the Camera Board to the \"LEFT\" side of the 2x10 header on the Red Vision Touch Display like the photo below shows:</p> <p></p>"},{"location":"hardware_assembly/#connect-touch-display-to-xrp-control-board","title":"Connect Touch Display to XRP Control Board","text":"<p>Next, carefully align the pins on the bottom of the Red Vision Touch Display with the \"Inner/Center\" pair of connectors on the XRP Control Board like the photo below:</p> <p></p> <p>Take care to make sure the Red Vision Touch Display is plugged in facing toward the FRONT of the XRP robot and is connected fully to the correct set of headers. It is possible to connect only one set of pins on the Touch Display board to the XRP Control Board's headers and this can cause damage to the boards in the Red Vision Kit. If your assembly looks like the photo below, do not power up the board and reseat the Touch Display:</p> <p></p> <p>Now that we've got our Red Vision Kit assembled and connect to the XRP robot, let's move on to some code examples!</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Red Vision Kit for XRP features the SparkFun Red Vision Touch Display for Pico and the SparkFun Red Vision Camera Board - HM01B0 (Color) so you can add image processing and display to the SparkFun Experiential Robotics Kit (XRP). This Hookup Guide is written primarily for users with the Red Vision kit but those who have just one of these boards can follow along to some degree to get their boards up and running on an XRP or Pico. Note, all code covered here assumes use of the full Red Vision kit connected to an XRP Kit.</p> <p></p>"},{"location":"introduction/#required-matierals","title":"Required Matierals","text":"<p>In order to follow along with this guide, you'll need the following materials:</p> <ul> <li>SparkFun Red Vision Kit for XRP</li> <li>SparkFun XRP Kit (The Red Vision Kit does not work with the Beta version of the XRP)</li> <li>USB-C Cable</li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>This guide assumes users have a fully assembled and functioning XRP Kit and also is somewhat familiar with the XRP Code Editor. If you need help assembling your XRP Kit or getting started with the XRP and the XRP Code editor, please read through the following documentation:</p> <ul> <li>XRP Users Guide</li> <li>Experiential Robotics Platform Docs</li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":"<p>This Quick Start Guide covers how to get the SparkFun Red Vision Kit for XRP assembled and running on an XRP Kit and then use the Logo Recognition example to have the display identify and outline the SparkFun flame logo when the camera has it in view. This guide assumes users have an assembled XRP Kit, an understanding of how the kit functions as well as how to update XRP firmware and use the XRP Code Editor. If you're not familiar with those concepts or want to learn more about the boards included in the Red Vision Kit, uploading firmware and using the Red Vision MicroPython examples, read on to the Hardware and Software sections for more detailed information.</p>"},{"location":"quickstart/#xrp-red-vision-firmware","title":"XRP Red Vision Firmware","text":"<p>Important!</p> <p>Updating the firmware on the XRP Control Board will overwrite any files or settings saved on the board. Make sure to back up the contents of your XRP before updating the firmware.</p> <p>Putting the XRP in Boot mode with the Red Vision Kit connected to it is a bit difficult so we'll update the firmware before connecting the Red Vision Kit with the following steps:</p> <ul> <li>Plug the XRP Control Board into your computer over USB-C.</li> <li>Download the latest release of the Red Vision MicroPtyhon Firmware from GitHub<ul> <li>On the MicroPython releases page, click the \"Show all ## assets\" button at the bottom of the list and then download the UF2 file named RED_VISION_MICROPYTHON_SPARKFUN_XRP_CONTROLLER</li> </ul> </li> <li>Put the XRP Control Board into BOOT mode with the following steps:<ul> <li>Press and hold the BOOT button</li> <li>Press and release the RESET button (while holding the BOOT button)</li> <li>Release the BOOT button.</li> <li>Ensure the XRP Control Board appears as a removable storage device named \"RP2350\".</li> </ul> </li> <li>Locate the \"RED_VISION_MICROPYTHON_SPARKFUN_XRP_CONTROLLER\" Firmware UF2 file and drag or copy/paste the file into the \"RP2350\" removable drive (This can take a while to complete.)</li> </ul>"},{"location":"quickstart/#red-vision-kit-assembly-with-xrp","title":"Red Vision Kit Assembly with XRP","text":"<p>With the firmware updated, unplug the Control Board, power down the robot and then move on to assembling the Red Vision Kit with the following steps:</p> <ul> <li>Connect the Red Vision Camera Board to the Red Vision Touch Display for Pico taking care to align the Camera Board's 2x9 header to the LEFT side of the Touch Display's 2x10 connector. Refer to the photo below for proper alignment:</li> </ul> <p></p> <ul> <li>Plug the Red Vision Touch Display into the Control Board taking care to plug it into the \"middle\" set of headers on the Control Board:</li> </ul> <p></p> <p>Take care to make sure the Pico Touch Display is plugged in facing toward the front of the XRP robot and is connected fully to the correct set of headers. It is possible to connect only one set of pins on the Touch Display board to the XRP Control Board's headers and this can cause damage to the boards in the Red Vision Kit. If your assembly looks like the photo below, do not power up the board and reseat the Touch Display:</p> <p></p>"},{"location":"quickstart/#example-code","title":"Example Code","text":"<p>Now that we've got the proper firmware installed and the Red Vision Kit connected to the XRP robot, let's take a look at the SparkFun Logo Recognition example included with the firmware. Upload the example by following the steps below:</p> <ul> <li>Open the XRP Code Editor in a Chromium<sup>\u2122</sup>C based browser (Chrome, Edge, etc.)<ul> <li>If you have not already, set the main power switch on the XRP Control Board to \"On\". The XRP Code Editor has a pop-up for this as well if you try and run code without the board powered on fully.</li> </ul> </li> <li>Connect the XRP to the Code Editor. The window may open a pop-up asking to update the firmware. Click \"Cancel\" as updating the firmware will overwrite the MicroPython OpenCV firmware. A second pop-up may open asking to update libraries, click \"Ok\" to update the libraries. This will not affect the behavior or examples and is necessary to run other XRP examples.</li> <li>Open the folder named \"red_vision_examples\" and double click the file named \"ex06_detect_sfe_logo.py\" to open the code.</li> <li>Next, click the green \"RUN\" button in the top-right of the XRP Code Editor window.</li> <li>With the code running, we've printed out a black and white image with three objects on it; a star, the SparkFun flame and a heart. When holding it in front of the camera it should outline it and give information on the size and location of the logo. If you'd like to replicate this at home, just hold up your SparkFun red box or another SparkFun board point the logo on it at the camera. It should identify it; outline it and give information on the size and location of the logo similarly to the photo below:</li> </ul> <p></p> <p>This close-up photo offers a better view of what the Touch Screen Display shows when the SparkFun logo is detected in camera frame. You can see in the top left what contour the code is looking for, the bounding box and outline of the logo along with information on the position of the logo's center on the screen (green numbers) and the size of the bounding box (white numbers).</p> <p></p>"},{"location":"red_vision_examples/","title":"Red Vision Examples","text":"<p>Now that we have the XRP Code editor up and running with our XRP Kit connected, let's take a look at some of the examples.</p>"},{"location":"red_vision_examples/#example-01-hello-opencv","title":"Example 01 - Hello OpenCV","text":"<p>The first example is set up as a hardware test for the Touch Display board and the LCD. It initializes the display and creates a template image of text and shapes. On the left-hand side of the XRP Code editor, open the Red Vision Examples folder and double-click on \"ex01_hello_opencv.py\". Once it opens, click the green \"Run\" button in the top-right of the window. You should see the display initialize and then show the image below:</p> <p></p>"},{"location":"red_vision_examples/#example-02-camera","title":"Example 02 - Camera","text":"<p>The second example performs a similar hardware test but this time for the Camera Board and the HM0B10. It initializes both the camera and display, shows a quick splash image and then shows whatever the camera sees on the display. In the Red Vision Examples folder, double-click on \"ex02_camera.py\". After opening the file, click the \"Run\" button and you should see the display initialize with the splash screen pictured below followed by a greyscale stream of what the camera is viewing. </p> <p></p> <p>Try moving the camera around or placing objects in front of it to test the video stream.</p>"},{"location":"red_vision_examples/#example-03-touch-screen","title":"Example 03 - Touch Screen","text":"<p>The third example tests the touch screen functionality by \"turning on\" pixels touched by a finger or other capacitive source (stylus, etc.). Double-click on \"ex03_touch_screen.py\" in the OpenCV Examples folder and click the \"Run\" button. The screen initializes with the same splash display as before and then follows it with a black screen with \"Touch to Draw\" printed in white text at the top of the screen. Try moving your finger across the display to draw or write something and you should see the display update following that path. It's not extremely precise as it's just a 240x240px display but you can draw a frumpy smiley face like the image below:</p> <p></p>"},{"location":"red_vision_examples/#example-06-detect-sfe-logo","title":"Example 06 - Detect SFE Logo","text":"<p>The sixth example demonstrates how to use a basic vision processing pipeline. A pipeline is a sequence of steps used to extract meaningful data from an image. In this example, the pipeline attempts to have the camera detect the SparkFun flame logo using contour matching. In the XRP Code Editor, double click \"ex_06_detect_sfe_logo.py\" to open the example and click the \"Run\" button.</p> <p>While the example is running, if the camera detects the logo in frame, it outlines it on the display and draws a bounding box along with a target over the center of the logo to show how to get useful numerical data from an image such as the position and size of an object:</p> <p></p> <p>For our testing we have a nice big black and white print out with three objects on it; a star, SparkFun flame and heart. Now you may not have the same thing handy but if you've got a SparkFun red box or SparkFun board, try holding that up to the camera with the SparkFun flame in frame and the code should recognize it and outline it on the display just like the image above.</p>"},{"location":"red_vision_examples/#xrp-example-01-touch-drive","title":"XRP Example 01 - Touch Drive","text":"<p>The next two examples are nested in another folder within the \"red_vision_examples\" folder called \"xrp_examples\". Click on the \"xrp_examples\" folder to open it up and then double-click on the example named \"ex01_touch_screen_drive.py\" to open the code. This example creates a simple touch screen interface to drive the XRP robot. It displays four arrows to drive the robot forwards, backwards and to turn it left and right along with a stop button to exit the example.</p> <p></p>"},{"location":"red_vision_examples/#xrp-example-02-grab-orange-ring","title":"XRP Example 02 - Grab Orange Ring","text":"<p>The second XRP example demonstrates how to combine object presence and position along with driving the robot towards the detected object. This takes a lot of what we've covered in the previous examples and puts them all together. Open the example in the XRP Code Editor by double clicking \"ex02_grab_orange_ring.py\". This example requires a bit of setup so it waits on a user input from the USER button on the XRP Control Board. We start by lining the robot up facing the orange ring so the camera identifies the object, outlines it and gets positional and distance data to the ring:</p> <p></p>"},{"location":"red_vision_examples/#calculating-distance-and-center-offset","title":"Calculating Distance and Center Offset","text":"<p>Look closely at the image and you'll see the ring is not just outlined with pixel position data (95, 185), it also shows information on the offset from center of the camera's point of view (X=-9.4cm) as well as the approximate distance to the ring (D=25.6cm). We calculate the distance to the ring using the following formula: </p> <p>distance_cm = diameter_cm * focal_length_px / diameter_px</p> <p>We're solving for \"distance_cm\" so we need the real world diameter of the ring (diameter_cm=12.7cm), the focal length pixel size (focal_length_px = 660 / 3.6) and the diameter of the ring in pixels (diameter_px = max(width, height)). </p> <p>Now that we have the approximate distance, we use that information to solve for how far left (negative units) or right (positive units) the ring is from the center in real world units using the following formula:</p> <p>position_x_cm = distance_cm * position_x_px / focal_length_px</p> <p>In the image above you'll see this ends up measuring as -9.4cm so the camera sees the ring as roughly 9.4cm left of center.</p>"},{"location":"red_vision_examples/#user-input-and-movement","title":"User Input and Movement","text":"<p>Alright, that's enough math, let's see the robot move and grab the ring! Once you see the ring outlined on the Touch Display with values for distance and offset, press the USER button and the XRP robot will start navigating toward the ring and once it thinks it's in the right spot will lift the servo arm to grab the ring:</p> <p></p>"},{"location":"red_vision_examples/#tips-for-recreating-grab-ring-example","title":"Tips for Recreating Grab Ring Example","text":"<p>This example can be difficult to recreate on your own as it's looking for a specific object; an orange ring that is 12.7cm in diameter. If you'd like to try and recreate this example, you'll need to start with a ring roughly the same size and then adjust a few sections of the code depending on the size and color of the ring. The example specifically is looking for orange pixels so if your ring is a different color, you'll need to adjust the hue, saturation and value bounds for the color of your ring:</p> <pre><code>    # Here we use the `cv.inRange()` function to find all the orange pixels.\n    # This outputs a binary image where pixels that fall within the specified\n    # lower and upper bounds are set to 255 (white), and all other pixels are\n    # set to 0 (black). This is applied to the HSV image, so the lower and upper\n    # bounds are in HSV color space. The bounds were determined experimentally:\n    # \n    # Hue: Orange hue is around 20, so we use a range of 15 to 25\n    # Saturation: Anything above 50 is saturated enough\n    # Value: Anything above 30 is bright enough\n    lower_bound = (15, 50, 30)\n    upper_bound = (25, 255, 255)\n</code></pre> <p>Next, measure the diameter of the ring and adjust line 122 in the example with the diameter in centimeters (cm):</p> <pre><code>diameter_cm = 12.7\n</code></pre> <p>Finally, this example attempts to drive the center of the XRP robot toward the orange ring so you'll need to position the servo arm on the front of the XRP robot as close as possible to the center of the robot similar to the position shown in the photo below:</p> <p></p>"},{"location":"resources/","title":"Resources","text":"<p>For more information about the Red Vision Kit for XRP along with the two boards included in it, check out the following resources:</p> <p>Red Vision Pico Touch Display * Schematic * KiCad Files * Board Dimensions * GitHub Repository</p> <p>Red Vision Camera Board - HM01B0 (Color) * Schematic * KiCad Files * Board Dimensions * HM01B0 Datasheet * GitHub Repository</p> <p>SparkFun MicroPython and Red Vision Code * SparkFun MicroPython Firmware Releases * SparkFun Red Vision Code Package * SparkFun MicroPython OpenCV Port</p>"},{"location":"touch_display/","title":"Touch Display Overview","text":"<p>Let's take a closer look at the Red Vision Touch Display for Pico and the hardware included on it.</p>"},{"location":"touch_display/#2-capacitive-touch-lcd","title":"2\" Capacitive Touch LCD","text":"<p>The Touch Display Board has a 2\", 340x240px resolution capacitive touch LCD. </p>"},{"location":"touch_display/#connectors","title":"Connectors","text":""},{"location":"touch_display/#pico-headers","title":"Pico Headers","text":"<p>We designed this board to mount directly to the XRP Control Board as well as a Rasbperry Pi Pico so it has a pair of 20 pin male headers that match the footprint of those two boards. These headers break out all the required pins for running and controlling both the display on this board as well as pins for the connected camera board. </p>"},{"location":"touch_display/#camera-connector","title":"Camera Connector","text":"<p>The Touch Display board has a 2x10 female connector to connect to the Red Vision Camera Board (or other compatible camera board, refer to this list for supported hardware). Note, the Camera Board has a 2x9 header so when connecting the two, make sure to align it to the side near the Qwiic connector. We cover this in more detail with photos in the Hardware Assembly section further on in this guide.</p>"},{"location":"touch_display/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board has one Qwiic connector to allow users to easily add other Qwiic devices to their circuit if desired.</p>"},{"location":"touch_display/#gpio-expander","title":"GPIO Expander","text":"<p>The Touch Display includes a PCA9534PW GPIO expander to control several I/O (input and output) pins from the display, camera and SD card over I<sup>2</sup>C. Users can interact with the GPIO expander using the SparkFun PCA9685 Python package.</p>"},{"location":"touch_display/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The board includes a \u00b5SD card slot to allow users to increase the memory capacity of a connected board; whether that be the XRP Control Board or a Pico.</p>"},{"location":"touch_display/#reset-button","title":"Reset Button","text":"<p>The reset button on the Touch Display board connects to the reset button on the XRP Control Board (or Pico) to allow easy access to reset the board.</p>"},{"location":"touch_display/#led","title":"LED","text":"<p>The sole LED on this board is a red Power LED to indicate when the board has power.</p>"},{"location":"touch_display/#solder-jumpers","title":"Solder Jumpers","text":"<p>The Red Vision Touch Display for Pico has a large amount of solder jumpers so we'll cover them in subsections. Note, manipulating these solder jumpers is only recommended for advanced users as they alter the functionality of the board, change the pins used by it and require knowledge of working with jumper pads and PCB traces. </p>"},{"location":"touch_display/#gpio-expander-jumpers","title":"GPIO Expander Jumpers","text":"<p>This set of jumpers labeled A0, A1 and A2 control the I<sup>2</sup>C address of the GPIO Expander. All three jumpers are OPEN by default to set the GPIO Expander's address to 0x20. Closing different combinations of these jumpers lets users select from eight I<sup>2</sup>C addresses. The table below outlines the different options to change the address. You can also refer to the schematic for more information.</p> I<sup>2</sup>C Address A0 State A1 State A2 State 0x20 (Default) Open Open Open 0x21 Closed Open Open 0x22 Open Closed Open 0x23 Closed Closed Open 0x24 Open Open Closed 0x25 Closed Open Closed 0x26 Open Closed Closed 0x27 Closed Closed Closed <p>The fourth jumper for the GPIO Expander controls whether or not the IC's enable pin connects to GPIO2 on the XRP Control Board. The jumper is OPEN by default. Close the jumper to connect the enable pin to GPIO2 for software control of the GPIO Expander.</p>"},{"location":"touch_display/#camera-connections-dvp-interface-jumpers","title":"Camera Connections (DVP Interface) Jumpers","text":"<p>The solder jumper labeled XCLK allows users to generate an external clock to a connected camera from GPIO3. This jumper is OPEN by default. Closing this jumper connects the external clock pin on a connected camera to GPIO3 so make sure a connected camera is configured to use an external clock signal from this pin. Note: The Red Vision Camera Board included in this kit is configured to use an on-board external clock by default so make sure to adjust the board to use an external clock signal from GPIO3 prior to closing this jumper.</p> <p>The two groups of solder jumpers labeled 1-BIT and 8-BIT allow users to change between running a connected camera in 1-Bit (Default) or 8-bit modes. Switching between 1-Bit and 8-Bit requires adjusting all of the related jumpers. For example, the board defaults to running a camera in 1-Bit mode by having all 1-Bit jumpers CLOSED and all 8-Bit jumpers OPEN. The tables below outline which pins a connected camera route to when set to run in 1-Bit or 8-Bit modes:</p> <p>1-Bit Camera Operation</p> Camera Pin XRP/Pico Pin Notes CAM_DO GPIO12 Camera Data 0 Out CAM_VS GPIO13 Camera Frame Valid Output CAM_HS GPIO14 Cam Line Valid Output CAM_PCLK GPIO15 Camera Pixel Clock/Serial Clock Out <p>8-Bit Camera Operation</p> Camera Pin XRP/Pico Pin Note CAM_DO GPIO8 Camera Data 0 Out CAM_D1 GPIO9 Camera Data 1 Out CAM_D2 GPIO10 Camera Data 2 Out CAM_D3 GPIO11 Camera Data 3 Out CAM_D4 GPIO12 Camera Data 4 Out CAM_D5 GPIO13 Camera Data 5 Out CAM_D6 GPIO14 Camera Data 6 Out CAM_D7 GPIO15 Camera Data 7 Out CAM_PCLK GPIO20 Camera Pixel Clock/Serial Clock Out CAM_VS GPIO21 Camera Frame Valid Output CAM_HS GPIO22 Cam Line Valid Output"},{"location":"touch_display/#other-jumpers","title":"Other Jumpers","text":"<p>The last jumpers we haven't covered are labeled PWR and I2C. The PWR solder jumper completes the Power LED circuit and is CLOSED by default. Open the solder jumper to disable the Power LED. The I2C jumper pulls the I<sup>2</sup>C data (SDA/GPIO4) and clock (SCL/GPIO5) pins to 3.3V through a pair of 2.2k\u03a9 resistors. Open this three-way jumper to disable the pullup resistors on the I<sup>2</sup>C bus if necessary.</p>"},{"location":"touch_display/#board-dimensions","title":"Board Dimensions","text":"<p>The Red Vision Touch Display for Pico measures 2.00\" x 2.225\" (50.80mm x 56.515mm).</p> <p></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#red-vision-assembly-tips","title":"Red Vision Assembly Tips","text":""},{"location":"troubleshooting/#camera-board-alignment","title":"Camera Board Alignment","text":"<p>Make sure to align the Camera Board to the \"LEFT\" side of the 2x10 header on the Red Vision Touch Display like the photo below shows:</p> <p></p>"},{"location":"troubleshooting/#touch-display-alignment","title":"Touch Display Alignment","text":"<p>Take care to make sure the Red Vision Touch Display is plugged in facing toward the FRONT of the XRP robot and is connected fully to the correct set of headers. It is possible to connect only one set of pins on the Touch Display board to the XRP Control Board's headers and this can cause damage to the boards in the Red Vision Kit. If your assembly looks like the photo below, do not power up the board and reseat the Touch Display:</p> <p></p>"},{"location":"troubleshooting/#sparkfun-red-vision-code-package-tips","title":"SparkFun Red Vision Code Package Tips","text":"<p>The SparkFun MicroPython OpenCV port's ReadMe file has comprehensive information about the entire package including detailed installation instructions, supported hardware, included OpenCV functions with descriptions of how to use them and much more.</p>"},{"location":"troubleshooting/#hardware-configuration","title":"Hardware Configuration","text":"<p>The MicroPython port of OpenCV depends on hardware drivers to interface with cameras and displays. Drivers are built into the firmware, so there is no need to install them manually. </p> <p>An example module called cv2_hardware_init is imported by all examples to initialize the drivers. You will likely need to edit the files for your specific hardware and board configuration.</p> <p>The standard MicroPython OpenCV firmware UF2 file contains a hardware configuration file set up specifically to work with the XRP Kit. If you're not using the Red Vision Kit with an XRP, you'll most likely need to go and change the pin assignments in the cv2_hardware_init</p>"},{"location":"troubleshooting/#performance","title":"Performance","text":"<p>The main version of OpenCV is designed to run on desktop machines with orders of magnitude more processing power and speed so temper your expectations for the performance of this OpenCV port. </p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"xrp_code/","title":"XRP Code","text":"<p>The SparkFun Red Vision Kit for XRP and SparkFun MicroPython OpenCV port can work on any MicroPython but since this guide focuses around using these boards on the XRP Kit, we'll be showing how to use these examples with the XRP Code Editor as it's tailored specifically to work with the XRP. </p>"},{"location":"xrp_code/#xrp-code-editor","title":"XRP Code Editor","text":"<p>The XRP Code Editor is a specialized web-based code editor for the XRP Kit to allow users to program in both Blocky and Python environments. We'll be using the Python environment. Note, the XRP Code Editor is only supported in Chromium<sup>\u2122</sup>C based browsers (Chrome, Edge, etc.).</p>"},{"location":"xrp_code/#connect-xrp","title":"Connect XRP","text":"<p>First we need to connect the XRP to the XRP Code Editor by clicking the white \"CONNECT XRP\" button in the top right of the window and select \"CONNECT VIA USB\" in the pop-up window. Once the XRP connects you may see a pop-up asking to update the firmware. Click \"CANCEL\" as updating the firmware overwrites the Red Vision firmware we just installed:</p> <p></p> <p>Now that we've got the XRP connected to the XRP Code Editor, we can move on to running the examples for the Red Vision Kit.</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Ambient Light Sensor - VEML7700 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Ambient Light Sensor - VEML7700 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Ambient Light Sensor - VEML7700 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Ambient Light Sensor - VEML7700 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}